{"version":3,"file":"background/background.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,cAAc;;;;;;;;;;;;;;;ACnBgB;AAC7C;AACA,6BAA6B,sDAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,oCAAoC,aAAa;AACjD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,2CAA2C,oBAAoB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,cAAc;;;;;;;;;;;;;;;ACrCgB;AAC7C;AACA,6BAA6B,sDAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,aAAa;AACjD;AACA;AACA;AACA,mCAAmC,YAAY;AAC/C,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,2CAA2C,oBAAoB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,cAAc;;;;;;;;;;;;;;;AC9BgB;AAC7C;AACA,iCAAiC,sDAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kFAAkF;AAC1F,QAAQ,oFAAoF;AAC5F,QAAQ,wEAAwE;AAChF,QAAQ,iFAAiF;AACzF,QAAQ;AACR;AACA;AACA;AACA;AACA,oCAAoC,aAAa;AACjD;AACA;AACA;AACA,mCAAmC,YAAY;AAC/C;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,+CAA+C,oBAAoB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,kBAAkB,EAAC;;;;;;;;;;;;;;;AC1CW;AAC7C;AACA,kCAAkC,sDAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,2GAA2G;AACnH,QAAQ,2EAA2E;AACnF,QAAQ,qEAAqE;AAC7E,QAAQ;AACR;AACA;AACA;AACA;AACA,oCAAoC,aAAa;AACjD;AACA;AACA;AACA,mCAAmC,YAAY;AAC/C,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,gDAAgD,oBAAoB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,mBAAmB,EAAC;;;;;;;;;;;;;;;;;;ACxCyB;AACA;AACQ;AACE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qEAAc;AAC1C,4BAA4B,qEAAc;AAC1C,gCAAgC,yEAAkB;AAClD,iCAAiC,0EAAmB;AACpD,oDAAoD,aAAa;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,uDAAuD,sCAAsC;AAC7F;AACA;AACA,4CAA4C,cAAc;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,sBAAsB,EAAC;;;;;;UCjFtC;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;AACoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,uBAAuB,sBAAsB;AAC7C,OAAO;AACP,iBAAiB;AACjB;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,YAAY,sCAAsC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iEAAS;AACb;AACA;AACA;AACA,+BAA+B,iEAAS;AACxC;AACA;AACA,sJAAsJ,mBAAmB;AACzK,WAAW;AACX;AACA;AACA,sDAAsD,oBAAoB,IAAI,aAAa;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,UAAU;AACV;AACA,mBAAmB;AACnB;AACA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC","sources":["webpack://ai-browser-assistant/./src/utils/ai-providers/base-provider.js","webpack://ai-browser-assistant/./src/utils/ai-providers/claude-provider.js","webpack://ai-browser-assistant/./src/utils/ai-providers/openai-provider.js","webpack://ai-browser-assistant/./src/utils/ai-providers/openrouter-provider.js","webpack://ai-browser-assistant/./src/utils/ai-providers/siliconflow-provider.js","webpack://ai-browser-assistant/./src/utils/ai-service-manager.js","webpack://ai-browser-assistant/webpack/bootstrap","webpack://ai-browser-assistant/webpack/runtime/define property getters","webpack://ai-browser-assistant/webpack/runtime/hasOwnProperty shorthand","webpack://ai-browser-assistant/webpack/runtime/make namespace object","webpack://ai-browser-assistant/./src/background/background.js"],"sourcesContent":["class BaseAIProvider {\r\n  constructor(apiKey, model) {\r\n    this.apiKey = apiKey;\r\n    this.model = model;\r\n  }\r\n\r\n  async analyze(content) {\r\n    throw new Error('Method not implemented');\r\n  }\r\n\r\n  async chat(messages) {\r\n    throw new Error('Method not implemented');\r\n  }\r\n\r\n  async complete(prompt) {\r\n    throw new Error('Method not implemented');\r\n  }\r\n}\r\n\r\nexport default BaseAIProvider;","import BaseAIProvider from './base-provider';\r\n\r\nclass ClaudeProvider extends BaseAIProvider {\r\n  constructor(apiKey) {\r\n    super(apiKey);\r\n    this.baseURL = 'https://api.anthropic.com/v1';\r\n  }\r\n\r\n  async chat(messages) {\r\n    // 将消息格式转换为 Claude 格式\r\n    const formattedMessages = messages.map(msg => ({\r\n      role: msg.role === 'assistant' ? 'assistant' : 'user',\r\n      content: msg.content\r\n    }));\r\n\r\n    const response = await fetch(`${this.baseURL}/messages`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'x-api-key': this.apiKey,\r\n        'anthropic-version': '2023-06-01'\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'claude-3-opus-20240229',\r\n        messages: formattedMessages,\r\n        max_tokens: 1000\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Claude API error: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  }\r\n}\r\n\r\nexport default ClaudeProvider;","import BaseAIProvider from './base-provider';\r\n\r\nclass OpenAIProvider extends BaseAIProvider {\r\n  constructor(apiKey) {\r\n    super(apiKey);\r\n    this.baseURL = 'https://api.openai.com/v1';\r\n  }\r\n\r\n  async chat(messages) {\r\n    const response = await fetch(`${this.baseURL}/chat/completions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${this.apiKey}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'gpt-3.5-turbo',\r\n        messages,\r\n        temperature: 0.7\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`OpenAI API error: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  }\r\n}\r\n\r\nexport default OpenAIProvider;","import BaseAIProvider from './base-provider';\r\n\r\nclass OpenRouterProvider extends BaseAIProvider {\r\n  constructor(apiKey, model) {\r\n    super(apiKey, model || OpenRouterProvider.getDefaultModel());\r\n    this.baseURL = 'https://openrouter.ai/api/v1';\r\n  }\r\n\r\n  static getSupportedModels() {\r\n    return [\r\n      { id: 'openai/gpt-4-turbo-preview', name: 'GPT-4 Turbo', description: 'Via OpenAI' },\r\n      { id: 'anthropic/claude-3-opus', name: 'Claude 3 Opus', description: 'Via Anthropic' },\r\n      { id: 'google/gemini-pro', name: 'Gemini Pro', description: 'Via Google' },\r\n      { id: 'meta-llama/llama-2-70b-chat', name: 'Llama 2 70B', description: 'Via Meta' },\r\n      { id: 'mistral/mistral-medium', name: 'Mistral Medium', description: 'Via Mistral AI' }\r\n    ];\r\n  }\r\n\r\n  async chat(messages) {\r\n    const response = await fetch(`${this.baseURL}/chat/completions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${this.apiKey}`,\r\n        'HTTP-Referer': chrome.runtime.getManifest().homepage_url || 'https://github.com',\r\n        'X-Title': chrome.runtime.getManifest().name\r\n      },\r\n      body: JSON.stringify({\r\n        model: this.model,\r\n        messages,\r\n        temperature: 0.7\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`OpenRouter API error: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  }\r\n}\r\n\r\nexport default OpenRouterProvider; ","import BaseAIProvider from './base-provider';\r\n\r\nclass SiliconFlowProvider extends BaseAIProvider {\r\n  constructor(apiKey, model) {\r\n    super(apiKey, model || SiliconFlowProvider.getDefaultModel());\r\n    this.baseURL = 'https://api.siliconflow.cn/v1';\r\n  }\r\n\r\n  static getSupportedModels() {\r\n    return [\r\n      { id: 'Qwen/Qwen2.5-7B-Instruct', name: 'Qwen/Qwen2.5-7B-Instruct', description: 'Qwen/Qwen2.5-7B-Instruct' },\r\n      { id: 'gpt-3.5-turbo', name: 'GPT-3.5 Turbo', description: 'OpenAI GPT-3.5' },\r\n      { id: 'claude-2', name: 'Claude 2', description: 'Anthropic Claude 2' },\r\n      { id: 'palm2', name: 'PaLM 2', description: 'Google PaLM 2' }\r\n    ];\r\n  }\r\n\r\n  async chat(messages) {\r\n    const response = await fetch(`${this.baseURL}/chat/completions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${this.apiKey}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: this.model,\r\n        stream: false,\r\n        messages,\r\n        temperature: 0.7\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`SiliconFlow API error: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  }\r\n}\r\n\r\nexport default SiliconFlowProvider; ","import OpenAIProvider from './ai-providers/openai-provider';\r\nimport ClaudeProvider from './ai-providers/claude-provider';\r\nimport OpenRouterProvider from './ai-providers/openrouter-provider';\r\nimport SiliconFlowProvider from './ai-providers/siliconflow-provider';\r\n\r\nclass AIServiceManager {\r\n  constructor() {\r\n    this.providers = new Map();\r\n    this.currentProvider = null;\r\n  }\r\n\r\n  async initialize() {\r\n    const settings = await chrome.storage.sync.get(['aiProvider', 'apiKeys']);\r\n    if (settings.aiProvider && settings.apiKeys?.[settings.aiProvider]) {\r\n      this.setProvider(settings.aiProvider, settings.apiKeys[settings.aiProvider]);\r\n    }\r\n  }\r\n\r\n  getProviderClass(providerName) {\r\n    switch (providerName.toLowerCase()) {\r\n      case 'openai': return OpenAIProvider;\r\n      case 'claude': return ClaudeProvider;\r\n      case 'openrouter': return OpenRouterProvider;\r\n      case 'siliconflow': return SiliconFlowProvider;\r\n      default: throw new Error(`Unknown provider: ${providerName}`);\r\n    }\r\n  }\r\n\r\n  setProvider(providerName, apiKey, model) {\r\n    const ProviderClass = this.getProviderClass(providerName);\r\n    this.currentProvider = new ProviderClass(apiKey, model);\r\n  }\r\n\r\n  getModelsForProvider(providerName) {\r\n    const ProviderClass = this.getProviderClass(providerName);\r\n    return ProviderClass.getSupportedModels();\r\n  }\r\n\r\n  async chat(messages) {\r\n    if (!this.currentProvider) {\r\n      throw new Error('No AI provider configured');\r\n    }\r\n\r\n    try {\r\n      const response = await this.currentProvider.chat(messages);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`AI request failed with provider ${this.currentProvider.constructor.name}:`, error);\r\n      \r\n      // 重新抛出带有更多上下文的错误\r\n      throw new Error(`AI request failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // 获取支持的提供商列表\r\n  getSupportedProviders() {\r\n    return [\r\n      {\r\n        id: 'openai',\r\n        name: 'OpenAI',\r\n        description: 'OpenAI GPT API'\r\n      },\r\n      {\r\n        id: 'claude',\r\n        name: 'Claude',\r\n        description: 'Anthropic Claude API'\r\n      },\r\n      {\r\n        id: 'openrouter',\r\n        name: 'OpenRouter',\r\n        description: 'OpenRouter API Gateway'\r\n      },\r\n      {\r\n        id: 'siliconflow',\r\n        name: 'SiliconFlow',\r\n        description: 'SiliconFlow API Service'\r\n      }\r\n    ];\r\n  }\r\n}\r\n\r\nexport default new AIServiceManager(); ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// 导入 AI 服务管理器\r\nimport aiManager from '../utils/ai-service-manager';\r\n\r\n// 初始化\r\nchrome.runtime.onInstalled.addListener(() => {\r\n  // 设置默认配置\r\n  chrome.storage.sync.set({\r\n    features: {\r\n      adBlocking: true,\r\n      searchReordering: true,\r\n      contextSuggestions: true\r\n    }\r\n  });\r\n});\r\n\r\n// 处理来自内容脚本的消息\r\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n  console.log('Background received message:', request);\r\n  if (request.type === 'aiRequest') {\r\n    handleAIRequest(request)\r\n      .then(response => {\r\n        console.log('Sending response:', response);\r\n        sendResponse(response);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error handling request:', error);\r\n        sendResponse({ error: error.message });\r\n      });\r\n    return true; // 保持消息通道开放\r\n  }\r\n});\r\n\r\n// AI 请求处理函数\r\nasync function handleAIRequest(request) {\r\n  console.log('Handling AI request:', request);\r\n  try {\r\n    const { provider, model, apiKey, type, data } = request;\r\n    \r\n    if (!provider || !model || !apiKey) {\r\n      throw new Error('Missing required API configuration');\r\n    }\r\n    \r\n    // 确保 AI 管理器使用正确的配置\r\n    aiManager.setProvider(provider, apiKey, model);\r\n    \r\n    switch (type) {\r\n      case 'aiRequest':\r\n        const analysis = await aiManager.currentProvider.chat([\r\n          {\r\n            role: 'system',\r\n            content: 'You are an ad detection assistant. Analyze the given HTML content and determine if it is likely an advertisement. Respond with {\"isAd\": true/false}.'\r\n          },\r\n          {\r\n            role: 'user',\r\n            content: `判断下面的HTML标签内容是否是广告，必须遵循这样的格式回复 {\"isAd\": true/false} : ${data.content}`\r\n          }\r\n        ]);\r\n\r\n        if (!analysis?.choices?.[0]?.message?.content) {\r\n          throw new Error('Invalid API response format');\r\n        }\r\n\r\n        try {\r\n          const result = JSON.parse(analysis.choices[0].message.content);\r\n          if (typeof result.isAd !== 'boolean') {\r\n            throw new Error('Invalid response format: isAd must be boolean');\r\n          }\r\n          return { isAd: result.isAd };\r\n        } catch (e) {\r\n          console.error('Failed to parse AI response:', e);\r\n          return { isAd: false };\r\n        }\r\n\r\n      default:\r\n        throw new Error(`Unknown endpoint: ${endpoint}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('AI request error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// 注册服务工作进程\r\nself.addEventListener('activate', event => {\r\n  console.log('Service Worker activated');\r\n});\r\n\r\nself.addEventListener('fetch', event => {\r\n  // 可以在这里添加网络请求拦截逻辑\r\n});\r\n"],"names":[],"sourceRoot":""}