{"version":3,"file":"background/background.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA,UAAU,0CAA0C;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,SAAS;AAC7D;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,OAAO;AACxC,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA,8CAA8C,gBAAgB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,OAAO;AACxC,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,yCAAyC,gBAAgB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,yCAAyC,gBAAgB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,uBAAuB,sBAAsB;AAC7C,OAAO;AACP,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C,KAAK;AACL;AACA;AACA;AACA;AACA,wCAAwC;AACxC,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,UAAU,kBAAkB;AAC5B;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,mCAAmC,YAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,CAAC,G","sources":["webpack://ai-browser-assistant/./src/background/background.js"],"sourcesContent":["console.log('Background script initializing...');\r\n\r\n// 监听扩展安装或更新事件\r\nchrome.runtime.onInstalled.addListener(() => {\r\n  console.log('Extension installed/updated');\r\n  // 初始化存储的默认值\r\n  chrome.storage.sync.set({\r\n    features: {\r\n      adBlocking: true,\r\n      searchReordering: true,\r\n      contextSuggestions: true\r\n    },\r\n    aiProvider: 'siliconflow',\r\n    aiModel: 'qwen/qwen-turbo',\r\n    apiKeys: {}\r\n  });\r\n});\r\n\r\n// 处理 AI 请求\r\nasync function handleAIRequest(request) {\r\n  const { provider, model, apiKey, endpoint, data } = request;\r\n  \r\n  try {\r\n    // 根据不同的 AI 提供商处理请求\r\n    switch (provider) {\r\n      case 'siliconflow':\r\n        return await handleSiliconFlowRequest(endpoint, data, apiKey);\r\n      case 'openai':\r\n        return await handleOpenAIRequest(model, data, apiKey);\r\n      case 'claude':\r\n        return await handleClaudeRequest(model, data, apiKey);\r\n      default:\r\n        throw new Error(`Unsupported AI provider: ${provider}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('AI request failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// SiliconFlow API 请求处理\r\nasync function handleSiliconFlowRequest(endpoint, data, apiKey) {\r\n  console.log('SiliconFlow API 请求处理')\r\n  const response = await fetch(`https://api.siliconflow.cn/v1/chat/completions`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${apiKey}`\r\n    },\r\n    body: JSON.stringify(data)\r\n  });\r\n  console.log(JSON.stringify(data))\r\n  if (!response.ok) {\r\n    throw new Error(`SiliconFlow API error: ${response.status}`);\r\n  }\r\n\r\n  return await response.json();\r\n}\r\n\r\n// OpenAI API 请求处理\r\nasync function handleOpenAIRequest(model, data, apiKey) {\r\n  const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${apiKey}`\r\n    },\r\n    body: JSON.stringify({\r\n      model: model,\r\n      messages: data.messages\r\n    })\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`OpenAI API error: ${response.status}`);\r\n  }\r\n\r\n  return await response.json();\r\n}\r\n\r\n// Claude API 请求处理\r\nasync function handleClaudeRequest(model, data, apiKey) {\r\n  const response = await fetch('https://api.anthropic.com/v1/messages', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'x-api-key': apiKey,\r\n      'anthropic-version': '2023-06-01'\r\n    },\r\n    body: JSON.stringify({\r\n      model: model,\r\n      messages: data.messages\r\n    })\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Claude API error: ${response.status}`);\r\n  }\r\n\r\n  return await response.json();\r\n}\r\n\r\n// 监听来自 content script 和 popup 的消息\r\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n  debugger;\r\n  console.log('Received message:', request);\r\n\r\n  if (request.type === 'aiRequest') {\r\n    handleAIRequest(request)\r\n      .then(response => {\r\n        console.log('AI response:', response);\r\n        sendResponse(response);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error:', error);\r\n        sendResponse({ error: error.message });\r\n      });\r\n    return true; // 保持消息通道开放\r\n  }\r\n\r\n  // 处理其他类型的消息\r\n  if (request.type === 'updateFeature') {\r\n    chrome.storage.sync.get('features', (data) => {\r\n      const features = data.features || {};\r\n      features[request.feature] = request.enabled;\r\n      chrome.storage.sync.set({ features });\r\n    });\r\n  }\r\n\r\n  if (request.type === 'getStats') {\r\n    chrome.storage.local.get('dailyStats', (data) => {\r\n      sendResponse(data.dailyStats || {});\r\n    });\r\n    return true;\r\n  }\r\n});\r\n\r\n// 更新统计数据\r\nasync function updateStats(type) {\r\n  const today = new Date().toDateString();\r\n  const { dailyStats = {} } = await chrome.storage.local.get('dailyStats');\r\n  \r\n  if (!dailyStats[today]) {\r\n    dailyStats[today] = { adsBlocked: 0, apiCalls: 0 };\r\n  }\r\n\r\n  dailyStats[today][type]++;\r\n  await chrome.storage.local.set({ dailyStats });\r\n}\r\n\r\n// 监听标签页更新\r\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\r\n  if (changeInfo.status === 'complete' && tab.url) {\r\n    chrome.tabs.sendMessage(tabId, { \r\n      type: 'pageLoaded',\r\n      url: tab.url\r\n    }).catch(() => {\r\n      // 忽略错误，content script 可能还没准备好\r\n    });\r\n  }\r\n}); "],"names":[],"sourceRoot":""}