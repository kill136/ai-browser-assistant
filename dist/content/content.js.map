{"version":3,"file":"content/content.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,SAAS;AAClF;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,mBAAmB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://ai-browser-assistant/./src/content/content.js"],"sourcesContent":["// 将需要导入的内容直接定义在文件中\r\nconst CONFIG = {\r\n  adIndicators: [\r\n    'ad', 'ads', 'advertisement', 'sponsored', 'promotion',\r\n    'banner', 'adsense', 'adwords', 'doubleclick'\r\n  ],\r\n  commonAdSizes: [\r\n    [728, 90],  // Leaderboard\r\n    [300, 250], // Medium Rectangle\r\n    [160, 600]  // Wide Skyscraper\r\n  ]\r\n};\r\n\r\nclass ContentAnalyzer {\r\n  constructor() {\r\n    console.trace('ContentAnalyzer constructor called');\r\n    this.initialize();\r\n  }\r\n\r\n  async initialize() {\r\n    try {\r\n      // 初始化配置\r\n      const config = await this.getAPIConfig();\r\n      console.log('Initialized with config:', config);\r\n      \r\n      // 等待 DOM 加载完成\r\n      if (document.readyState === 'loading') {\r\n        document.addEventListener('DOMContentLoaded', () => this.onDOMReady());\r\n      } else {\r\n        this.onDOMReady();\r\n      }\r\n    } catch (error) {\r\n      console.error('Initialization failed:', error);\r\n    }\r\n  }\r\n\r\n  onDOMReady() {\r\n    // 初始分析当前页面内容\r\n    this.analyzeExistingContent();\r\n  }\r\n\r\n  analyzeExistingContent() {\r\n  // 根据不同搜索引擎选择合适的选择器\r\n  const isGoogle = window.location.hostname.includes('google');\r\n  const isBing = window.location.hostname.includes('bing');\r\n  const isBaidu = window.location.hostname.includes('baidu');\r\n\r\n  let searchResults;\r\n  if (isGoogle) {\r\n    // Google 搜索结果选择器\r\n    searchResults = document.querySelectorAll([\r\n      '#search .g',                // 普通搜索结果\r\n      '#rso .g',                   // 另一种搜索结果容器\r\n      'div[data-sokoban-grid]',    // 新版搜索结果\r\n      '.commercial-unit-desktop-top', // 顶部广告\r\n      '.commercial-unit-desktop-rhs'  // 右侧广告\r\n    ].join(','));\r\n  } else if (isBing) {\r\n    // Bing 搜索结果选择器\r\n    searchResults = document.querySelectorAll([\r\n      '#b_results > li',           // 主要搜索结果\r\n      '.b_ad',                     // 广告结果\r\n      '.b_algo',                   // 算法搜索结果\r\n      '.b_sideBleed'               // 侧边栏结果\r\n    ].join(','));\r\n  } else if (isBaidu) {\r\n    // 百度搜索结果选择器\r\n    searchResults = document.querySelectorAll([\r\n      '#content_left > div',      // 主要搜索结果区域\r\n      '.result-op',               // 特殊搜索结果（如百科、图片等）\r\n      '.result',                  // 普通搜索结果\r\n      '[cmatchid]',              // 广告结果\r\n      '.ec_tuiguang_link',       // 推广链接\r\n      '#content_right .cr-content', // 右侧栏内容\r\n      '.c-container'             // 新版搜索结果容器\r\n    ].join(','));\r\n  }\r\n\r\n  // 分析每个搜索结果块\r\n  for (const result of searchResults) {\r\n      // 等待分析完成并处理结果\r\n      this.analyzeSearchResult(result).then(isAd => {\r\n        if (isAd) {\r\n          // 如果是广告，隐藏结果\r\n          result.style.display = 'none';\r\n          // 或者添加警告样式\r\n          // result.classList.add('ad-warning');\r\n          console.log('已隐藏广告内容:', result);\r\n        }\r\n      }).catch(error => {\r\n        console.error('分析搜索结果时出错:', error);\r\n      });\r\n    }\r\n  }\r\n\r\n  setupMutationObserver() {\r\n    // 使用 MutationObserver 替代废弃的 DOM 事件\r\n    const observer = new MutationObserver((mutations) => {\r\n      for (const mutation of mutations) {\r\n        if (mutation.type === 'childList') {\r\n          // 分析新添加的节点\r\n          mutation.addedNodes.forEach(node => {\r\n            if (node.nodeType === Node.ELEMENT_NODE) {\r\n              this.analyzeElement(node);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    // 配置观察选项\r\n    observer.observe(document.body, {\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n  }\r\n\r\n  async analyzeElement(element) {\r\n    try {\r\n      // 检查元素是否可能是广告\r\n      const isAd = await this.analyzeForAd(element);\r\n      if (isAd) {\r\n        element.style.display = 'none';\r\n      }\r\n    } catch (error) {\r\n      console.error('Element analysis failed:', error);\r\n    }\r\n  }\r\n\r\n  async analyzeForAd(content) {\r\n    try {\r\n        try {\r\n          // 使用 AI 进行进一步分析\r\n          const response = await this.makeAPIRequest('analyzeContent', { content });\r\n          return response && response.isAd === true;\r\n        } catch (apiError) {\r\n          console.warn('AI analysis failed, falling back to heuristic detection:', apiError);\r\n          // 如果 API 调用失败，回退到基于启发式的判断\r\n          return isLikelyAd;\r\n        }\r\n    } catch (error) {\r\n      console.error('Ad analysis failed:', error);\r\n      return false; // 出错时默认不屏蔽内容\r\n    }\r\n  }\r\n\r\n  async makeAPIRequest(endpoint, data) {\r\n    try {\r\n      const config = await this.getAPIConfig();\r\n      \r\n      if (!config || !config.apiKey) {\r\n        console.warn(`API configuration incomplete. Provider: ${config?.aiProvider}`);\r\n        return null;\r\n      }\r\n\r\n      // 添加重试逻辑\r\n      const maxRetries = 3;\r\n      let retryCount = 0;\r\n      \r\n      while (retryCount < maxRetries) {\r\n        try {\r\n          const response = await new Promise((resolve, reject) => {\r\n            chrome.runtime.sendMessage({\r\n              type: 'aiRequest',\r\n              provider: config.aiProvider,\r\n              model: config.aiModel,\r\n              apiKey: config.apiKey,\r\n              endpoint,\r\n              data\r\n            }, response => {\r\n              if (chrome.runtime.lastError) {\r\n                reject(new Error(chrome.runtime.lastError.message));\r\n                return;\r\n              }\r\n\r\n              if (!response) {\r\n                reject(new Error(response?.error || 'API request failed'));\r\n                return;\r\n              }\r\n\r\n              resolve(response);\r\n            });\r\n          });\r\n\r\n          // 验证响应数据\r\n          if (!response || typeof response.isAd !== 'boolean') {\r\n            throw new Error('Invalid API response format');\r\n          }\r\n\r\n          return response;\r\n        } catch (error) {\r\n          retryCount++;\r\n          if (retryCount === maxRetries) {\r\n            throw error;\r\n          }\r\n          // 等待一段时间后重试\r\n          await new Promise(resolve => setTimeout(resolve, 1000 * retryCount));\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('API request failed:', error);\r\n      // 返回一个默认的安全响应，而不是 null\r\n      return { isAd: false };\r\n    }\r\n  }\r\n\r\n  async getAPIConfig() {\r\n    return new Promise((resolve) => {\r\n      const DEFAULT_PROVIDER = 'siliconflow';\r\n      const DEFAULT_MODEL = 'gpt-3.5-turbo';\r\n\r\n      chrome.storage.sync.get({\r\n        // 提供默认值\r\n        aiProvider: DEFAULT_PROVIDER,\r\n        aiModel: DEFAULT_MODEL,\r\n        apiKeys: {}\r\n      }, (result) => {\r\n        console.log('Storage result:', result); // 调试用\r\n        \r\n        const config = {\r\n          apiKey: result.apiKeys[result.aiProvider],\r\n          aiProvider: result.aiProvider,\r\n          aiModel: result.aiModel\r\n        };\r\n        \r\n        console.log('Config:', config); // 调试用\r\n        resolve(config);\r\n      });\r\n    });\r\n  }\r\n\r\n  analyzeSearchResult(result) {\r\n    // 提取所有可见文本的辅助函数\r\n    const getVisibleText = (element) => {\r\n      if (element.offsetParent === null) return '';\r\n      \r\n      if (element.tagName === 'SCRIPT' || \r\n          element.tagName === 'STYLE' || \r\n          element.tagName === 'NOSCRIPT') {\r\n        return '';\r\n      }\r\n\r\n      let text = '';\r\n      for (const node of element.childNodes) {\r\n        if (node.nodeType === Node.TEXT_NODE) {\r\n          const trimmed = node.textContent.trim();\r\n          if (trimmed) text += trimmed + ' ';\r\n        } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n          text += getVisibleText(node) + ' ';\r\n        }\r\n      }\r\n      return text.trim();\r\n    };\r\n\r\n    // 获取所有可见文本\r\n    const allText = getVisibleText(result);\r\n    // 进行内容分析\r\n    return this.analyzeForAd(allText);\r\n  }\r\n}\r\n\r\n// 初始化内容分析器\r\nconst analyzer = new ContentAnalyzer();\r\n"],"names":[],"sourceRoot":""}