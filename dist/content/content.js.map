{"version":3,"file":"content/content.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,sBAAsB;AAC3F;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,mBAAmB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,+CAA+C,cAAc,IAAI;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,qBAAqB;AACrB;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA,YAAY,yBAAyB;AACrC;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;UEp3BA;UACA;UACA;UACA;UACA","sources":["webpack://ai-browser-assistant/./src/content/content.js","webpack://ai-browser-assistant/webpack/before-startup","webpack://ai-browser-assistant/webpack/startup","webpack://ai-browser-assistant/webpack/after-startup"],"sourcesContent":["// 将需要导入的内容直接定义在文件中\r\nconst CONFIG = {\r\n  adIndicators: [\r\n    'ad', 'ads', 'advertisement', 'sponsored', 'promotion',\r\n    'banner', 'adsense', 'adwords', 'doubleclick'\r\n  ],\r\n  commonAdSizes: [\r\n    [728, 90],  // Leaderboard\r\n    [300, 250], // Medium Rectangle\r\n    [160, 600]  // Wide Skyscraper\r\n  ]\r\n};\r\n\r\nclass ContentAnalyzer {\r\n  constructor() {\r\n    this.filterSearchResults = []; // 添加数组存储过滤后的搜索结果\r\n    console.trace('ContentAnalyzer constructor called');\r\n    this.features = {\r\n      adBlocking: true,\r\n      searchReordering: true,\r\n      contextSuggestions: true,\r\n      readingMode: false\r\n    };\r\n    \r\n    this.readingState = {\r\n      summary: '',\r\n      keywords: [],\r\n      readingProgress: 0,\r\n      isReadingMode: false\r\n    };\r\n\r\n    // 修改初始化流程\r\n    this.loadFeatureSettings().then(() => {\r\n      this.initialize();\r\n      // 如果阅读模式是开启的，自动重新启用\r\n      if (this.features.readingMode && !this.readingModeIframe) {\r\n        this.readingState.isReadingMode = true;\r\n        this.enableReadingMode();\r\n      }\r\n    });\r\n\r\n    this.progressInterval = null; // 添加进度更新定时器引用\r\n    this.readingModeIframe = null;\r\n\r\n    // 添加消息监听器到实例\r\n    this.setupMessageListeners();\r\n  }\r\n\r\n  setupMessageListeners() {\r\n    window.addEventListener('message', (event) => {\r\n      if (event.source === this.readingModeIframe?.contentWindow) {\r\n        console.log('Received message from reading mode:', event.data);\r\n        \r\n        const { type } = event.data;\r\n        \r\n        if (type === 'closeReadingMode') {\r\n          console.log('Processing close reading mode');\r\n          \r\n          // 更新功能状态\r\n          this.features.readingMode = false;\r\n          this.readingState.isReadingMode = false;\r\n          \r\n          // 关闭阅读模式\r\n          this.disableReadingMode();\r\n          \r\n          // 更新 floating-options 中的开关状态\r\n          if (window.floatingOptionsIframe) {\r\n            window.floatingOptionsIframe.contentWindow.postMessage({\r\n              type: 'updateToggleState',\r\n              feature: 'readingMode',\r\n              enabled: false\r\n            }, '*');\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async initialize() {\r\n    try {\r\n      // 初始化配置\r\n      const config = await this.getAPIConfig();\r\n      console.log('Initialized with config:', config);\r\n      \r\n      // 待 DOM 加载完成\r\n      if (document.readyState === 'loading') {\r\n        document.addEventListener('DOMContentLoaded', () => this.onDOMReady());\r\n      } else {\r\n        this.onDOMReady();\r\n      }\r\n    } catch (error) {\r\n      console.error('Initialization failed:', error);\r\n    }\r\n  }\r\n\r\n  onDOMReady() {\r\n    // 初始分析当前页面内容\r\n    this.analyzeExistingContent();\r\n  }\r\n\r\n  async analyzeExistingContent() {\r\n    // 获取搜索关键词\r\n    const searchQuery = this.getSearchQuery();\r\n    if (!searchQuery) return;\r\n    \r\n    // 获取搜索结果\r\n    const searchResults = this.getSearchResultsByEngine();\r\n    if (!searchResults.length) return;\r\n  \r\n    // 清空之前的结果数组\r\n    this.filterSearchResults = [];\r\n  \r\n    // 创建一个Promise数组来存储所有分析任务\r\n    const analysisPromises = searchResults.map(async result => {\r\n      // 如果是答案框，直接返回，不做处理\r\n      if (result.isAnswer) {\r\n        return {\r\n          element: result.element,\r\n          score: 0,\r\n          isAnswer: true\r\n        };\r\n      }\r\n\r\n      let shouldInclude = true;\r\n      let relevanceScore = 0;\r\n  \r\n      // 广告分析\r\n      if (this.features.adBlocking) {\r\n        const isAd = await this.analyzeSearchResult(result.element, searchQuery);\r\n        if (isAd) {\r\n          result.element.classList.add('ai-assistant-blocked');\r\n          result.element.style.display = 'none';\r\n          shouldInclude = false;\r\n        } else {\r\n          result.element.classList.remove('ai-assistant-blocked');\r\n          result.element.style.display = '';\r\n        }\r\n      }\r\n  \r\n      // 关性分析\r\n      if (shouldInclude) {\r\n        relevanceScore = this.features.searchReordering ? \r\n          await this.calculateRelevance(result.element, searchQuery) : \r\n          0;\r\n        \r\n        return {\r\n          element: result.element,\r\n          score: relevanceScore,\r\n          isAnswer: false\r\n        };\r\n      }\r\n  \r\n      return null;\r\n    });\r\n  \r\n    // 等待所有分析完成\r\n    const results = await Promise.all(analysisPromises);\r\n    \r\n    // 过滤并排序结果，答案框保持原位\r\n    this.filterSearchResults = results\r\n      .filter(item => item !== null)\r\n      .sort((a, b) => {\r\n        // 如果其中一个是答案框，保持原位\r\n        if (a.isAnswer) return -1;\r\n        if (b.isAnswer) return 1;\r\n        // 否则按分数排序\r\n        return b.score - a.score;\r\n      });\r\n  }\r\n\r\n  setupMutationObserver() {\r\n    // 使用 MutationObserver 替代废弃的 DOM 事件\r\n    const observer = new MutationObserver((mutations) => {\r\n      for (const mutation of mutations) {\r\n        if (mutation.type === 'childList') {\r\n          // 分析新添加的节点\r\n          mutation.addedNodes.forEach(node => {\r\n            if (node.nodeType === Node.ELEMENT_NODE) {\r\n              this.analyzeElement(node);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    // 配置察选项\r\n    observer.observe(document.body, {\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n  }\r\n\r\n  async analyzeElement(element) {\r\n    try {\r\n      // 检查元素是否可能是广告\r\n      const isAd = await this.analyzeForAd(element);\r\n      if (isAd) {\r\n        element.style.display = 'none';\r\n      }\r\n    } catch (error) {\r\n      console.error('Element analysis failed:', error);\r\n    }\r\n  }\r\n\r\n  async analyzeForAd(content, searchQuery) {\r\n    // 如果广告拦截被禁用，直接返回 false\r\n    if (!this.features.adBlocking) {\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      const response = await this.makeAPIRequest('analyzeContent', { content, searchQuery });\r\n      // 只返回分析结果，不在这里处理 DOM\r\n      return response && response.isAd === true;\r\n    } catch (error) {\r\n      console.error('Ad analysis failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async makeAPIRequest(endpoint, data) {\r\n    try {\r\n      const config = await this.getAPIConfig();\r\n      \r\n      if (!config || !config.apiKey) {\r\n        console.warn(`API configuration incomplete. Provider: ${config?.aiProvider}`);\r\n        return null;\r\n      }\r\n\r\n      // 添加重试逻辑\r\n      const maxRetries = 3;\r\n      let retryCount = 0;\r\n      \r\n      while (retryCount < maxRetries) {\r\n        try {\r\n          const response = await new Promise((resolve, reject) => {\r\n            chrome.runtime.sendMessage({\r\n              type: 'aiRequest',      // 用于消息类型识别\r\n              endpoint: endpoint,      // 用于具体 API 端点识别\r\n              provider: config.aiProvider,\r\n              model: config.aiModel,\r\n              apiKey: config.apiKey,\r\n              data\r\n            }, response => {\r\n              if (chrome.runtime.lastError) {\r\n                reject(new Error(chrome.runtime.lastError.message));\r\n                return;\r\n              }\r\n\r\n              if (!response) {\r\n                reject(new Error('Empty response received'));\r\n                return;\r\n              }\r\n\r\n              // 根据不同端点验证响应\r\n              if (endpoint === 'analyzeContent' && typeof response.isAd !== 'boolean') {\r\n                reject(new Error('Invalid analyzeContent response format'));\r\n                return;\r\n              }\r\n              if (endpoint === 'calculateRelevance' && typeof response.relevanceScore !== 'number') {\r\n                reject(new Error('Invalid calculateRelevance response format'));\r\n                return;\r\n              }\r\n\r\n              resolve(response);\r\n            });\r\n          });\r\n\r\n          return response;\r\n        } catch (error) {\r\n          retryCount++;\r\n          if (retryCount === maxRetries) {\r\n            throw error;\r\n          }\r\n          await new Promise(resolve => setTimeout(resolve, 1000 * retryCount));\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('API request failed:', error);\r\n      // 根据端点返回适当的默认值\r\n      return endpoint === 'analyzeContent' ? { isAd: false } : { relevanceScore: 0 };\r\n    }\r\n  }\r\n\r\n  async getAPIConfig() {\r\n    return new Promise((resolve) => {\r\n      const DEFAULT_PROVIDER = 'siliconflow';\r\n      const DEFAULT_MODEL = 'gpt-3.5-turbo';\r\n\r\n      chrome.storage.sync.get({\r\n        // 提供默认值\r\n        aiProvider: DEFAULT_PROVIDER,\r\n        aiModel: DEFAULT_MODEL,\r\n        apiKeys: {}\r\n      }, (result) => {\r\n        console.log('Storage result:', result); // 调试用\r\n        \r\n        const config = {\r\n          apiKey: result.apiKeys[result.aiProvider],\r\n          aiProvider: result.aiProvider,\r\n          aiModel: result.aiModel\r\n        };\r\n        \r\n        console.log('Config:', config); // 调试用\r\n        resolve(config);\r\n      });\r\n    });\r\n  }\r\n\r\n  async analyzeSearchResult(result, searchQuery) {\r\n    // 提取所有可见文本\r\n    const allText = this.getVisibleText(result);\r\n    \r\n    // 进行内分析\r\n    const isAd = await this.analyzeForAd(allText, searchQuery);\r\n    \r\n    // 在这里处理 DOM 元素的显示/隐藏\r\n    if (isAd && this.features.adBlocking) {\r\n      result.classList.add('ai-assistant-blocked');\r\n      result.style.display = 'none';\r\n    } else {\r\n      result.classList.remove('ai-assistant-blocked');\r\n      result.style.display = '';\r\n    }\r\n    \r\n    return isAd;\r\n  }\r\n\r\n  getSearchQuery() {\r\n    const url = new URL(window.location.href);\r\n    \r\n    // Google 搜索\r\n    if (window.location.hostname.includes('google')) {\r\n      return url.searchParams.get('q');\r\n    }\r\n    // Bing 搜索\r\n    else if (window.location.hostname.includes('bing')) {\r\n      return url.searchParams.get('q');\r\n    }\r\n    // 百度搜索\r\n    else if (window.location.hostname.includes('baidu')) {\r\n      return url.searchParams.get('wd') || url.searchParams.get('word');\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  // 添加计算相关性的方法\r\n  async calculateRelevance(element, searchQuery) {\r\n    try {\r\n      const content = this.getVisibleText(element);\r\n      \r\n      // 调用AI服务计算相关性\r\n      const response = await this.makeAPIRequest('calculateRelevance', {\r\n        content,\r\n        searchQuery\r\n      });\r\n\r\n      return response?.relevanceScore || 0;\r\n    } catch (error) {\r\n      console.error('计算相关性失败:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // 添加重新排序的方法\r\n  reorderSearchResults() {\r\n    if (!this.features.searchReordering || !this.filterSearchResults?.length) {\r\n      return;\r\n    }\r\n\r\n    // 获取第一个元素的父容器\r\n    const container = this.filterSearchResults[0].element.parentElement;\r\n    if (!container) return;\r\n\r\n    // 临时创建一个文档片段来重新排序\r\n    const fragment = document.createDocumentFragment();\r\n    \r\n    // 先将所有元素从 DOM 中移除，并存储到新数组中\r\n    const elements = this.filterSearchResults.map(result => {\r\n      const element = result.element;\r\n      const clone = element.cloneNode(true); // 克隆节点\r\n      clone.classList.add('ai-assistant-reordered');\r\n      return clone;\r\n    });\r\n\r\n    // 将克隆的元素添加到文档片段中\r\n    elements.forEach(element => {\r\n      fragment.appendChild(element);\r\n    });\r\n\r\n    // 清空原容器\r\n    container.innerHTML = '';\r\n    \r\n    // 将重排序后的元素一次性添加回容器\r\n    container.appendChild(fragment);\r\n  }\r\n\r\n  // 将 getVisibleText 方法移到类的方法中\r\n  getVisibleText(element) {\r\n    if (element.offsetParent === null) return '';\r\n    \r\n    if (element.tagName === 'SCRIPT' || \r\n        element.tagName === 'STYLE' || \r\n        element.tagName === 'NOSCRIPT') {\r\n      return '';\r\n    }\r\n\r\n    let text = '';\r\n    for (const node of element.childNodes) {\r\n      if (node.nodeType === Node.TEXT_NODE) {\r\n        const trimmed = node.textContent.trim();\r\n        if (trimmed) text += trimmed + ' ';\r\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n        text += this.getVisibleText(node) + ' ';\r\n      }\r\n    }\r\n    return text.trim();\r\n  }\r\n\r\n  async loadFeatureSettings() {\r\n    try {\r\n      const { features = {} } = await chrome.storage.sync.get('features');\r\n      this.features = {\r\n        adBlocking: false,\r\n        searchReordering: false,\r\n        contextSuggestions: true,\r\n        readingMode: true,\r\n        ...features\r\n      };\r\n      \r\n      // 如果阅读模式默认开启，则自动启用\r\n      if (this.features.readingMode) {\r\n        this.readingState.isReadingMode = true;\r\n        this.enableReadingMode();\r\n      }\r\n      \r\n      console.log('Loaded features:', this.features);\r\n    } catch (error) {\r\n      console.error('Failed to load feature settings:', error);\r\n    }\r\n  }\r\n\r\n  setAdBlockingEnabled(enabled) {\r\n    this.features.adBlocking = enabled;\r\n    \r\n    // 如果禁用了广告拦截，恢复之前隐藏的广告\r\n    if (!enabled) {\r\n      document.querySelectorAll('.ai-assistant-blocked').forEach(el => {\r\n        el.classList.remove('ai-assistant-blocked');\r\n        el.style.display = ''; // 恢复显示\r\n      });\r\n    }\r\n    \r\n    // 重新分析当前页面内容\r\n    this.analyzeExistingContent();\r\n  }\r\n\r\n  // 辅助方法：根据不同搜索引擎获取搜索结果\r\n  getSearchResultsByEngine() {\r\n    const isGoogle = window.location.hostname.includes('google');\r\n    const isBing = window.location.hostname.includes('bing');\r\n    const isBaidu = window.location.hostname.includes('baidu');\r\n  \r\n    if (isGoogle) {\r\n      // Google 的选择器保持不变\r\n      return Array.from(document.querySelectorAll([\r\n        '#search .g',\r\n        '#rso .g',\r\n        'div[data-sokoban-grid]',\r\n        '.commercial-unit-desktop-top',\r\n        '.commercial-unit-desktop-rhs'\r\n      ].join(','))) || [];\r\n    } \r\n    \r\n    if (isBing) {\r\n      // 获取所有搜索结果，包括答案框\r\n      const allResults = Array.from(document.querySelectorAll('#b_results > li'));\r\n      \r\n      // 将结果分为答案框和普通结果\r\n      return allResults.map(result => {\r\n        if (result.classList.contains('b_ans')) {\r\n          // 标记为答案框，不参与处理\r\n          return {\r\n            element: result,\r\n            isAnswer: true\r\n          };\r\n        } else {\r\n          // 普通结果，参与处理\r\n          return {\r\n            element: result,\r\n            isAnswer: false\r\n          };\r\n        }\r\n      });\r\n    } \r\n    \r\n    // Baidu 的择持不变\r\n    if (isBaidu) {\r\n      return Array.from(document.querySelectorAll([\r\n        '#content_left > div',\r\n        '.result-op',\r\n        '.result',\r\n        '[cmatchid]',\r\n        '.ec_tuiguang_link',\r\n        '#content_right .cr-content',\r\n        '.c-container'\r\n      ].join(','))) || [];\r\n    }\r\n  \r\n    return [];\r\n  }\r\n\r\n  setSearchReorderingEnabled(enabled) {\r\n    this.features.searchReordering = enabled;\r\n    \r\n    if (!enabled) {\r\n      // 移除所有重排序相关的类和样式\r\n      document.querySelectorAll('.ai-assistant-reordered').forEach(el => {\r\n        el.classList.remove('ai-assistant-reordered');\r\n        el.style.order = ''; // 移除排序样式\r\n      });\r\n      \r\n      // 恢复原始顺序\r\n      const container = this.filterSearchResults[0]?.element.parentElement;\r\n      if (container) {\r\n        // 获取所有搜索结果\r\n        const results = this.getSearchResultsByEngine();\r\n        \r\n        // 清空容器\r\n        container.innerHTML = '';\r\n        \r\n        // 按原始顺序重新添加元素\r\n        results.forEach(result => {\r\n          container.appendChild(result);\r\n        });\r\n      }\r\n    }\r\n    \r\n    // 重新分析当前页面内容\r\n    this.analyzeExistingContent();\r\n  }\r\n\r\n  // 切换阅读模式\r\n  toggleReadingMode() {\r\n    if (!this.features.readingMode) {\r\n      console.warn('Reading mode feature is disabled');\r\n      return;\r\n    }\r\n\r\n    this.readingState.isReadingMode = !this.readingState.isReadingMode;\r\n    \r\n    if (this.readingState.isReadingMode) {\r\n      this.enableReadingMode();\r\n    } else {\r\n      this.disableReadingMode();\r\n      // 清除进度更新定时器\r\n      if (this.progressInterval) {\r\n        clearInterval(this.progressInterval);\r\n        this.progressInterval = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  // 启用阅读模\r\n  async enableReadingMode() {\r\n    if (!this.features.readingMode) return;\r\n\r\n    // 获取主要内容\r\n    const mainContent = this.getMainContent();\r\n    if (!mainContent) {\r\n        console.warn('No main content found, retrying...');\r\n        setTimeout(() => this.enableReadingMode(), 1000);\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // 生成摘要和关键词（提前生成）\r\n        const analysis = await this.analyzeContent(mainContent);\r\n        console.log('Content analysis completed:', analysis);\r\n\r\n        // 创建一个 Promise 来处理 iframe 加载和内容发送\r\n        const setupIframe = () => {\r\n            return new Promise((resolve) => {\r\n                // 创建 iframe\r\n                if (!this.readingModeIframe) {\r\n                    this.readingModeIframe = document.createElement('iframe');\r\n                    this.readingModeIframe.id = 'reading-mode-iframe';\r\n                    this.readingModeIframe.src = chrome.runtime.getURL('reading-mode/reading-mode.html');\r\n                    this.readingModeIframe.style.cssText = `\r\n                        position: fixed;\r\n                        border: none;\r\n                        z-index: 2147483646;\r\n                        background: transparent;\r\n                        width: 320px;\r\n                        height: 80vh;\r\n                        right: 20px;\r\n                        top: 20px;\r\n                    `;\r\n\r\n                    // 确保 load 事件在添加到 DOM 之前绑定\r\n                    this.readingModeIframe.addEventListener('load', () => {\r\n                        console.log('Reading mode iframe loaded');\r\n                        // 发送内容\r\n                        if (this.readingModeIframe?.contentWindow) {\r\n                            console.log('Sending content to reading mode:', analysis);\r\n                            this.readingModeIframe.contentWindow.postMessage({\r\n                                type: 'updateContent',\r\n                                content: analysis\r\n                            }, '*');\r\n                        }\r\n                        resolve();\r\n                    });\r\n\r\n                    document.body.appendChild(this.readingModeIframe);\r\n                } else {\r\n                    // 如果 iframe 已存在，直接发送内容\r\n                    this.readingModeIframe.contentWindow.postMessage({\r\n                        type: 'updateContent',\r\n                        content: analysis\r\n                    }, '*');\r\n                    resolve();\r\n                }\r\n            });\r\n        };\r\n\r\n        // 等待 iframe 设置完成\r\n        await setupIframe();\r\n        \r\n        // 添加滚动监听\r\n        this.setupScrollTracking();\r\n        \r\n        // 高亮关键词\r\n        if (analysis.keywords?.length) {\r\n            this.highlightKeywords(analysis.keywords);\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error('Failed to enable reading mode:', error);\r\n    }\r\n}\r\n  // 获取页面主要内容\r\n  getMainContent() {\r\n    // 常见的主要内容容器选择器\r\n    const selectors = [\r\n      'article',\r\n      '[role=\"main\"]',\r\n      '#main-content',\r\n      '.main-content',\r\n      'main',\r\n      '.post-content',\r\n      '.article-content'\r\n    ];\r\n    for (const selector of selectors) {\r\n      const element = document.querySelector(selector);\r\n      if (element) return element;\r\n    }\r\n\r\n    // 如果找不到特定容器，尝智能识别最可能的主要内容区域\r\n    return this.findMainContentArea();\r\n  }\r\n\r\n  // 智能识别主要内容区域\r\n  findMainContentArea() {\r\n    const paragraphs = document.getElementsByTagName('p');\r\n    if (paragraphs.length === 0) return null;\r\n\r\n    // 找到包含最多段落的容器\r\n    const containers = new Map();\r\n    \r\n    for (const p of paragraphs) {\r\n      let parent = p.parentElement;\r\n      while (parent && parent !== document.body) {\r\n        containers.set(parent, (containers.get(parent) || 0) + 1);\r\n        parent = parent.parentElement;\r\n      }\r\n    }\r\n\r\n    // 按段落数量排序\r\n    const sorted = [...containers.entries()].sort((a, b) => b[1] - a[1]);\r\n    return sorted[0]?.[0] || null;\r\n  }\r\n\r\n  // 分析内容生成摘要和关键词\r\n  async analyzeContent(content) {\r\n    const text = this.getVisibleText(content);\r\n    \r\n    try {\r\n      const response = await this.makeAPIRequest('analyzeReading', {\r\n        content: text\r\n      });\r\n\r\n      return {\r\n        summary: response.summary || '',\r\n        keywords: response.keywords || []\r\n      };\r\n    } catch (error) {\r\n      console.error('Content analysis failed:', error);\r\n      return { summary: '', keywords: [] };\r\n    }\r\n  }\r\n\r\n  // 设置滚动跟踪\r\n  setupScrollTracking() {\r\n    const content = this.getMainContent();\r\n    if (!content) return;\r\n\r\n    const updateProgress = () => {\r\n      const rect = content.getBoundingClientRect();\r\n      const totalHeight = content.scrollHeight;\r\n      const visibleHeight = window.innerHeight;\r\n      const scrolled = window.scrollY - rect.top;\r\n      \r\n      const progress = Math.min(100, Math.max(0, \r\n        (scrolled / (totalHeight - visibleHeight)) * 100\r\n      ));\r\n\r\n      this.readingState.readingProgress = progress;\r\n      \r\n      // 更新进度条\r\n      const progressBar = document.querySelector('.ai-reading-assistant .progress');\r\n      if (progressBar) {\r\n        progressBar.style.width = `${progress}%`;\r\n      }\r\n    };\r\n\r\n    window.addEventListener('scroll', updateProgress);\r\n    updateProgress(); // 初始化进度\r\n  }\r\n\r\n  // 高亮关键词\r\n  highlightKeywords(keywords) {\r\n    const content = this.getMainContent();\r\n    if (!content || !keywords.length) return;\r\n\r\n    const highlightText = (node) => {\r\n      if (node.nodeType === Node.TEXT_NODE) {\r\n        let text = node.textContent;\r\n        let highlighted = false;\r\n\r\n        keywords.forEach(keyword => {\r\n          const regex = new RegExp(`(${keyword})`, 'gi');\r\n          if (regex.test(text)) {\r\n            highlighted = true;\r\n            text = text.replace(regex, '<mark class=\"ai-keyword-highlight\">$1</mark>');\r\n          }\r\n        });\r\n\r\n        if (highlighted) {\r\n          const span = document.createElement('span');\r\n          span.innerHTML = text;\r\n          node.parentNode.replaceChild(span, node);\r\n        }\r\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\r\n        Array.from(node.childNodes).forEach(highlightText);\r\n      }\r\n    };\r\n\r\n    highlightText(content);\r\n  }\r\n\r\n  // 禁用阅读模式\r\n  disableReadingMode() {\r\n    console.log('Disabling reading mode'); // 添加调试日志\r\n    \r\n    if (this.readingModeIframe) {\r\n      this.readingModeIframe.remove();\r\n      this.readingModeIframe = null;\r\n    }\r\n\r\n    // 移除关键词高亮\r\n    document.querySelectorAll('.ai-keyword-highlight').forEach(el => {\r\n      const text = el.textContent;\r\n      el.parentNode.replaceChild(document.createTextNode(text), el);\r\n    });\r\n\r\n    // 清除进度更新定时器\r\n    if (this.progressInterval) {\r\n      clearInterval(this.progressInterval);\r\n      this.progressInterval = null;\r\n    }\r\n\r\n    // 重置状态\r\n    this.readingState = {\r\n      summary: '',\r\n      keywords: [],\r\n      readingProgress: 0,\r\n      isReadingMode: false\r\n    };\r\n  }\r\n\r\n  // 添加一个新方法来处理特性更新\r\n  updateFeature(featureName, enabled) {\r\n    this.features[featureName] = enabled;\r\n    \r\n    // 特别处理阅读模式\r\n    if (featureName === 'readingMode') {\r\n      if (enabled && !this.readingState.isReadingMode) {\r\n        this.readingState.isReadingMode = true;\r\n        this.enableReadingMode();\r\n      } else if (!enabled && this.readingState.isReadingMode) {\r\n        this.readingState.isReadingMode = false;\r\n        this.disableReadingMode();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// 初始化内容分析器\r\nconst analyzer = new ContentAnalyzer();\r\n\r\n// 注入悬浮选项\r\nconst iframe = document.createElement('iframe');\r\niframe.src = chrome.runtime.getURL('floating-options/floating-options.html');\r\niframe.style.cssText = `\r\n  position: fixed;\r\n  border: none;\r\n  z-index: 2147483647;\r\n  background: transparent;\r\n  width: 48px;\r\n  height: 48px;\r\n  right: 0;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  border-radius: 24px 0 0 24px;\r\n  transition: all 0.3s ease;\r\n  box-shadow: -2px 0 20px rgba(0,0,0,0.1);\r\n`;\r\n\r\n// 监听展开/收起消息\r\nwindow.addEventListener('message', (event) => {\r\n  if (event.source === iframe.contentWindow && event.data.type === 'toggleExpand') {\r\n    if (event.data.expanded) {\r\n      iframe.style.width = '300px';\r\n      iframe.style.height = '400px';  // 展开时设置固定高度\r\n      iframe.style.borderRadius = '12px 0 0 12px';\r\n    } else {\r\n      iframe.style.width = '48px';\r\n      iframe.style.height = '48px';\r\n      iframe.style.borderRadius = '24px 0 0 24px';\r\n    }\r\n  }\r\n});\r\n\r\ndocument.body.appendChild(iframe);\r\n\r\n// 添加消息监听，于iframe和主页面的通信\r\nwindow.addEventListener('message', (event) => {\r\n  if (event.source === iframe.contentWindow || event.source === this.readingModeIframe?.contentWindow) {\r\n    console.log('Received message:', event.data); // 添加调试日志\r\n    \r\n    const { type, feature, enabled } = event.data;\r\n    \r\n    if (type === 'closeReadingMode') {\r\n      console.log('Processing close reading mode'); // 添加调试日志\r\n      \r\n      // 更新功能状态\r\n      analyzer.features.readingMode = false;\r\n      analyzer.readingState.isReadingMode = false;\r\n      \r\n      // 关闭阅读模式\r\n      analyzer.disableReadingMode();\r\n      \r\n      // 更新 floating-options 中的开关状态\r\n      iframe.contentWindow.postMessage({\r\n        type: 'updateToggleState',\r\n        feature: 'readingMode',\r\n        enabled: false\r\n      }, '*');\r\n    } else if (type === 'updateFeature') {\r\n      analyzer.updateFeature(feature, enabled);\r\n    }\r\n  }\r\n});\r\n\r\n// 监听来自background的URL变化消息\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  if (message.type === 'URL_CHANGED') {\r\n    // 如果当前处于阅读模式，重新启用阅读模式以分析新页面\r\n    if (analyzer.readingState.isReadingMode) {\r\n      analyzer.enableReadingMode();\r\n    }\r\n  }\r\n});\r\n\r\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/content/content.js\"]();\n",""],"names":[],"sourceRoot":""}