{"version":3,"file":"floating-options/floating-options.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yCAAyC;AACjD,QAAQ,8BAA8B;AACtC,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,2CAA2C;AACrD,UAAU;AACV;AACA;AACA,UAAU,4CAA4C;AACtD,UAAU;AACV;AACA;AACA,UAAU,kCAAkC;AAC5C,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8BAA8B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC,G","sources":["webpack://ai-browser-assistant/./src/floating-options/floating-options.js"],"sourcesContent":["window.onerror = function(msg, url, lineNo, columnNo, error) {\r\n  console.error('Global error:', {\r\n    message: msg,\r\n    url: url,\r\n    lineNo: lineNo,\r\n    columnNo: columnNo,\r\n    error: error\r\n  });\r\n  return false;\r\n};\r\n\r\nwindow.addEventListener('unhandledrejection', event => {\r\n  console.error('Unhandled promise rejection:', event.reason);\r\n});\r\n\r\nclass FloatingOptions {\r\n  constructor() {\r\n    try {\r\n      this.container = document.getElementById('floatingOptions');\r\n      if (!this.container) {\r\n        throw new Error('Container element not found');\r\n      }\r\n      \r\n      this.toggleButton = document.getElementById('toggleButton');\r\n      this.providerSelect = document.getElementById('provider');\r\n      this.modelSelect = document.getElementById('model');\r\n      this.apiKeyInput = document.getElementById('apiKey');\r\n      this.saveButton = document.getElementById('saveButton');\r\n      this.debugButton = document.getElementById('debugButton');\r\n      this.statusDiv = document.getElementById('status');\r\n      \r\n      this.isDragging = false;\r\n      this.startY = 0;\r\n      this.startTop = 0;\r\n\r\n      this.initialize();\r\n    } catch (error) {\r\n      console.error('FloatingOptions initialization error:', error);\r\n    }\r\n  }\r\n\r\n  async initialize() {\r\n    try {\r\n      await this.setupEventListeners();\r\n      await this.loadProviders();\r\n      await this.loadSettings();\r\n      this.loadPosition();\r\n    } catch (error) {\r\n      console.error('Initialization error:', error);\r\n      this.showStatus('Failed to initialize: ' + error.message, 'error');\r\n    }\r\n  }\r\n\r\n  setupEventListeners() {\r\n    this.toggleButton.addEventListener('click', () => this.toggleExpand());\r\n    this.saveButton.addEventListener('click', () => this.saveSettings());\r\n    this.debugButton.addEventListener('click', () => this.debugStorage());\r\n    this.providerSelect.addEventListener('change', () => this.updateModelList());\r\n    this.container.addEventListener('mousedown', (e) => this.startDrag(e));\r\n    document.addEventListener('mousemove', (e) => this.drag(e));\r\n    document.addEventListener('mouseup', () => this.stopDrag());\r\n  }\r\n\r\n  async loadProviders() {\r\n    const providers = [\r\n      { id: 'siliconflow', name: 'Silicon Flow' },\r\n      { id: 'openai', name: 'OpenAI' },\r\n      { id: 'claude', name: 'Claude' }\r\n    ];\r\n\r\n    providers.forEach(provider => {\r\n      const option = document.createElement('option');\r\n      option.value = provider.id;\r\n      option.textContent = provider.name;\r\n      this.providerSelect.appendChild(option);\r\n    });\r\n  }\r\n\r\n  async updateModelList() {\r\n    const providerId = this.providerSelect.value;\r\n    this.modelSelect.innerHTML = '';\r\n\r\n    const models = {\r\n      siliconflow: [\r\n        { id: 'qwen/qwen-turbo', name: 'Qwen Turbo' },\r\n        { id: 'gpt-3.5-turbo', name: 'GPT-3.5 Turbo' }\r\n      ],\r\n      openai: [\r\n        { id: 'gpt-3.5-turbo', name: 'GPT-3.5 Turbo' },\r\n        { id: 'gpt-4', name: 'GPT-4' }\r\n      ],\r\n      claude: [\r\n        { id: 'claude-2', name: 'Claude 2' },\r\n        { id: 'claude-instant', name: 'Claude Instant' }\r\n      ]\r\n    };\r\n\r\n    models[providerId]?.forEach(model => {\r\n      const option = document.createElement('option');\r\n      option.value = model.id;\r\n      option.textContent = model.name;\r\n      this.modelSelect.appendChild(option);\r\n    });\r\n  }\r\n\r\n  async loadSettings() {\r\n    const settings = await chrome.storage.sync.get({\r\n      aiProvider: 'siliconflow',\r\n      aiModel: 'qwen/qwen-turbo',\r\n      apiKeys: {}\r\n    });\r\n\r\n    this.providerSelect.value = settings.aiProvider;\r\n    await this.updateModelList();\r\n    this.modelSelect.value = settings.aiModel;\r\n    this.apiKeyInput.value = settings.apiKeys[settings.aiProvider] || '';\r\n  }\r\n\r\n  async saveSettings() {\r\n    try {\r\n      const provider = this.providerSelect.value;\r\n      const model = this.modelSelect.value;\r\n      const apiKey = this.apiKeyInput.value;\r\n\r\n      await chrome.storage.sync.set({\r\n        aiProvider: provider,\r\n        aiModel: model,\r\n        apiKeys: {\r\n          [provider]: apiKey\r\n        }\r\n      });\r\n\r\n      this.showStatus('Settings saved successfully!', 'success');\r\n    } catch (error) {\r\n      this.showStatus('Error saving settings: ' + error.message, 'error');\r\n    }\r\n  }\r\n\r\n  async debugStorage() {\r\n    const settings = await chrome.storage.sync.get(null);\r\n    console.log('Current storage:', settings);\r\n    this.showStatus('Check console for debug info', 'success');\r\n  }\r\n\r\n  showStatus(message, type) {\r\n    this.statusDiv.textContent = message;\r\n    this.statusDiv.className = type;\r\n    setTimeout(() => {\r\n      this.statusDiv.textContent = '';\r\n      this.statusDiv.className = '';\r\n    }, 3000);\r\n  }\r\n\r\n  toggleExpand() {\r\n    this.container.classList.toggle('collapsed');\r\n    this.container.classList.toggle('expanded');\r\n  }\r\n\r\n  startDrag(e) {\r\n    if (e.target === this.toggleButton) {\r\n      this.isDragging = true;\r\n      this.startY = e.clientY;\r\n      this.startTop = this.container.offsetTop;\r\n    }\r\n  }\r\n\r\n  drag(e) {\r\n    if (!this.isDragging) return;\r\n    \r\n    const deltaY = e.clientY - this.startY;\r\n    const newTop = this.startTop + deltaY;\r\n    \r\n    const maxTop = window.innerHeight - this.container.offsetHeight;\r\n    const boundedTop = Math.max(0, Math.min(newTop, maxTop));\r\n    \r\n    this.container.style.top = boundedTop + 'px';\r\n    this.savePosition(boundedTop);\r\n  }\r\n\r\n  stopDrag() {\r\n    this.isDragging = false;\r\n  }\r\n\r\n  savePosition(top) {\r\n    chrome.storage.sync.set({ floatingOptionsPosition: top });\r\n  }\r\n\r\n  loadPosition() {\r\n    chrome.storage.sync.get(['floatingOptionsPosition'], (result) => {\r\n      if (result.floatingOptionsPosition !== undefined) {\r\n        this.container.style.top = result.floatingOptionsPosition + 'px';\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  try {\r\n    new FloatingOptions();\r\n  } catch (error) {\r\n    console.error('Failed to create FloatingOptions:', error);\r\n  }\r\n}); "],"names":[],"sourceRoot":""}