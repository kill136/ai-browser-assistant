{"version":3,"file":"floating-options/floating-options.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,8CAA8C,mCAAmC;AACjF;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8BAA8B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,2BAA2B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gDAAgD,mCAAmC;AACnF;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA,sCAAsC,YAAY;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,qBAAqB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,G","sources":["webpack://ai-browser-assistant/./src/floating-options/floating-options.js"],"sourcesContent":["window.onerror = function(msg, url, lineNo, columnNo, error) {\r\n  console.error('Global error:', {\r\n    message: msg,\r\n    url: url,\r\n    lineNo: lineNo,\r\n    columnNo: columnNo,\r\n    error: error\r\n  });\r\n  return false;\r\n};\r\n\r\nwindow.addEventListener('unhandledrejection', event => {\r\n  console.error('Unhandled promise rejection:', event.reason);\r\n});\r\n\r\nclass FloatingOptions {\r\n  constructor() {\r\n    this.elements = {\r\n      container: document.getElementById('floatingOptions'),\r\n      toggleButton: document.getElementById('toggleButton'),\r\n      adBlockingToggle: document.getElementById('adBlockingToggle'),\r\n      searchReorderingToggle: document.getElementById('searchReorderingToggle'),\r\n      contextSuggestionsToggle: document.getElementById('contextSuggestionsToggle'),\r\n      adsBlockedCount: document.getElementById('adsBlockedCount'),\r\n      apiCallsCount: document.getElementById('apiCallsCount'),\r\n      settingsButton: document.getElementById('settingsButton'),\r\n      refreshButton: document.getElementById('refreshButton'),\r\n      readingModeToggle: document.getElementById('readingModeToggle'),\r\n      readingProgress: document.getElementById('readingProgress')\r\n    };\r\n\r\n    this.initialize();\r\n  }\r\n\r\n  async initialize() {\r\n    await this.loadSettings();\r\n    await this.loadStats();\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  setupEventListeners() {\r\n    this.elements.toggleButton.addEventListener('click', () => this.toggleExpand());\r\n    \r\n    // 特性开关的事件监听器\r\n    this.elements.adBlockingToggle?.addEventListener('change', (e) => \r\n      this.updateFeature('adBlocking', e.target.checked));\r\n    \r\n    this.elements.searchReorderingToggle?.addEventListener('change', (e) => \r\n      this.updateFeature('searchReordering', e.target.checked));\r\n    \r\n    this.elements.contextSuggestionsToggle?.addEventListener('change', (e) => \r\n      this.updateFeature('contextSuggestions', e.target.checked));\r\n\r\n    // Settings 按钮事件监听器\r\n    this.elements.settingsButton?.addEventListener('click', () => {\r\n      if (chrome.runtime.openOptionsPage) {\r\n        chrome.runtime.openOptionsPage();\r\n      }\r\n    });\r\n\r\n    // Refresh Page 按钮事件监听器\r\n    this.elements.refreshButton?.addEventListener('click', async () => {\r\n      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\r\n      if (tab?.id) {\r\n        chrome.tabs.reload(tab.id);\r\n      }\r\n    });\r\n\r\n    // 添加阅读模式开关的事件监听器\r\n    this.elements.readingModeToggle?.addEventListener('change', (e) => {\r\n      this.toggleReadingMode(e.target.checked);\r\n    });\r\n\r\n    // 添加来自父页面的消息监听\r\n    window.addEventListener('message', (event) => {\r\n      console.log('Floating options received message:', event.data);\r\n      \r\n      if (event.data.type === 'updateToggleState') {\r\n        const { feature, enabled } = event.data;\r\n        const toggle = this.elements[`${feature}Toggle`];\r\n        if (toggle) {\r\n          toggle.checked = enabled;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async loadSettings() {\r\n    try {\r\n      const { features = {} } = await chrome.storage.sync.get('features');\r\n      \r\n      const defaultFeatures = {\r\n        adBlocking: true,\r\n        searchReordering: true,\r\n        contextSuggestions: true,\r\n        readingMode: false,\r\n        ...features\r\n      };\r\n\r\n      if (this.elements.adBlockingToggle) {\r\n        this.elements.adBlockingToggle.checked = defaultFeatures.adBlocking;\r\n      }\r\n      if (this.elements.searchReorderingToggle) {\r\n        this.elements.searchReorderingToggle.checked = defaultFeatures.searchReordering;\r\n      }\r\n      if (this.elements.contextSuggestionsToggle) {\r\n        this.elements.contextSuggestionsToggle.checked = defaultFeatures.contextSuggestions;\r\n      }\r\n      if (this.elements.readingModeToggle) {\r\n        this.elements.readingModeToggle.checked = defaultFeatures.readingMode;\r\n      }\r\n\r\n      if (defaultFeatures.readingMode) {\r\n        window.parent.postMessage({\r\n          type: 'updateFeature',\r\n          feature: 'readingMode',\r\n          enabled: true\r\n        }, '*');\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load settings:', error);\r\n    }\r\n  }\r\n\r\n  async loadStats() {\r\n    try {\r\n      const { dailyStats = {} } = await chrome.storage.local.get('dailyStats');\r\n      const today = new Date().toDateString();\r\n      const todayStats = dailyStats[today] || { adsBlocked: 0, apiCalls: 0 };\r\n\r\n      if (this.elements.adsBlockedCount) {\r\n        this.elements.adsBlockedCount.textContent = todayStats.adsBlocked;\r\n      }\r\n      if (this.elements.apiCallsCount) {\r\n        this.elements.apiCallsCount.textContent = todayStats.apiCalls;\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load stats:', error);\r\n    }\r\n  }\r\n\r\n  toggleExpand() {\r\n    const isExpanding = this.elements.container.classList.contains('collapsed');\r\n    this.elements.container.classList.toggle('collapsed');\r\n    this.elements.container.classList.toggle('expanded');\r\n    \r\n    // 通知父页面切换鼠标事件\r\n    window.parent.postMessage({\r\n      type: 'toggleExpand',\r\n      expanded: isExpanding\r\n    }, '*');\r\n  }\r\n\r\n  startDrag(e) {\r\n    if (e.target === this.elements.toggleButton) {\r\n      this.isDragging = true;\r\n      this.startY = e.clientY;\r\n      this.startTop = this.elements.container.offsetTop;\r\n    }\r\n  }\r\n\r\n  drag(e) {\r\n    if (!this.isDragging) return;\r\n    \r\n    const deltaY = e.clientY - this.startY;\r\n    const newTop = this.startTop + deltaY;\r\n    \r\n    const maxTop = window.innerHeight - this.elements.container.offsetHeight;\r\n    const boundedTop = Math.max(0, Math.min(newTop, maxTop));\r\n    \r\n    this.elements.container.style.top = boundedTop + 'px';\r\n    this.savePosition(boundedTop);\r\n  }\r\n\r\n  stopDrag() {\r\n    this.isDragging = false;\r\n  }\r\n\r\n  savePosition(top) {\r\n    chrome.storage.sync.set({ floatingOptionsPosition: top });\r\n  }\r\n\r\n  loadPosition() {\r\n    chrome.storage.sync.get(['floatingOptionsPosition'], (result) => {\r\n      if (result.floatingOptionsPosition !== undefined) {\r\n        this.elements.container.style.top = result.floatingOptionsPosition + 'px';\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateFeature(featureName, enabled) {\r\n    try {\r\n      // 获取当前特性设置\r\n      const { features = {} } = await chrome.storage.sync.get('features');\r\n      \r\n      // 更新特定特性\r\n      const updatedFeatures = {\r\n        ...features,\r\n        [featureName]: enabled\r\n      };\r\n\r\n      // 保存到存储\r\n      await chrome.storage.sync.set({ features: updatedFeatures });\r\n\r\n      // 通知内容脚本更新\r\n      try {\r\n        // 由于我们在 iframe 中，需要通过 postMessage 发送消息到父页面\r\n        window.parent.postMessage({\r\n          type: 'updateFeature',\r\n          feature: featureName,\r\n          enabled\r\n        }, '*');\r\n\r\n        // 同时通知其他标签页\r\n        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\r\n        if (tab?.id) {\r\n          await chrome.tabs.sendMessage(tab.id, {\r\n            type: 'updateFeature',\r\n            feature: featureName,\r\n            enabled\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.warn('Failed to notify content script:', error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to update feature:', error);\r\n      // 回滚 UI 状态\r\n      const toggle = this.elements[`${featureName}Toggle`];\r\n      if (toggle) {\r\n        toggle.checked = !enabled;\r\n      }\r\n    }\r\n  }\r\n\r\n  async toggleReadingMode(enabled) {\r\n    try {\r\n      // 通知父页面更新阅读模式\r\n      window.parent.postMessage({\r\n        type: 'updateFeature',\r\n        feature: 'readingMode',\r\n        enabled\r\n      }, '*');\r\n\r\n      // 保存设置\r\n      const { features = {} } = await chrome.storage.sync.get('features');\r\n      await chrome.storage.sync.set({\r\n        features: {\r\n          ...features,\r\n          readingMode: enabled\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to toggle reading mode:', error);\r\n      // 回滚 UI 状态\r\n      if (this.elements.readingModeToggle) {\r\n        this.elements.readingModeToggle.checked = !enabled;\r\n      }\r\n    }\r\n  }\r\n\r\n  // 更新阅读进度显示\r\n  updateReadingProgress(progress) {\r\n    if (this.elements.readingProgress) {\r\n      this.elements.readingProgress.textContent = `${Math.round(progress)}%`;\r\n    }\r\n  }\r\n}\r\n\r\n// 初始化\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  new FloatingOptions();\r\n}); "],"names":[],"sourceRoot":""}