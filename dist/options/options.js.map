{"version":3,"file":"options/options.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,4CAA4C;AACtD,UAAU;AACV;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,UAAU,kCAAkC;AAC5C,UAAU;AACV;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,UAAU,oDAAoD;AAC9D,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,yCAAyC,gCAAgC;AACzE,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,KAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA","sources":["webpack://ai-browser-assistant/./src/options/options.js"],"sourcesContent":["// AI 提供商配置\r\nconst PROVIDERS_CONFIG = {\r\n  providers: [\r\n    {\r\n      id: 'openai',\r\n      name: 'OpenAI',\r\n      models: [\r\n        { id: 'gpt-3.5-turbo', name: 'GPT-3.5 Turbo' },\r\n        { id: 'gpt-4', name: 'GPT-4' }\r\n      ]\r\n    },\r\n    {\r\n      id: 'claude',\r\n      name: 'Claude',\r\n      models: [\r\n        { id: 'claude-2', name: 'Claude 2' },\r\n        { id: 'claude-instant', name: 'Claude Instant' }\r\n      ]\r\n    },\r\n    {\r\n      id: 'siliconflow',\r\n      name: 'SiliconFlow',\r\n      models: [\r\n        { id: 'Qwen/Qwen2.5-7B-Instruct', name: 'Qwen Turbo' },\r\n        { id: 'qwen/qwen-plus', name: 'Qwen Plus' }\r\n      ]\r\n    }\r\n  ]\r\n};\r\n\r\n// 初始化函数\r\nasync function initializeOptions() {\r\n  const providerSelect = document.getElementById('provider');\r\n  const modelSelect = document.getElementById('model');\r\n  const apiKeyInput = document.getElementById('apiKey');\r\n  const saveButton = document.getElementById('saveButton');\r\n  const debugButton = document.getElementById('debugButton');\r\n\r\n  // 填充 AI 提供商下拉列表\r\n  PROVIDERS_CONFIG.providers.forEach(provider => {\r\n    const option = document.createElement('option');\r\n    option.value = provider.id;\r\n    option.textContent = provider.name;\r\n    providerSelect.appendChild(option);\r\n  });\r\n\r\n  // 更新模型列表的函数\r\n  function updateModelList(providerId) {\r\n    modelSelect.innerHTML = '';\r\n    const provider = PROVIDERS_CONFIG.providers.find(p => p.id === providerId);\r\n    if (provider) {\r\n      provider.models.forEach(model => {\r\n        const option = document.createElement('option');\r\n        option.value = model.id;\r\n        option.textContent = model.name;\r\n        modelSelect.appendChild(option);\r\n      });\r\n    }\r\n  }\r\n\r\n  // 当提供商改变时更新模型列表\r\n  providerSelect.addEventListener('change', () => {\r\n    updateModelList(providerSelect.value);\r\n  });\r\n\r\n  // 加载保存的设置\r\n  const settings = await chrome.storage.sync.get({\r\n    aiProvider: 'siliconflow',\r\n    aiModel: 'qwen/qwen-turbo',\r\n    apiKeys: {}\r\n  });\r\n\r\n  // 设置表单的初始值\r\n  providerSelect.value = settings.aiProvider;\r\n  updateModelList(settings.aiProvider);\r\n  if (settings.aiModel) {\r\n    modelSelect.value = settings.aiModel;\r\n  }\r\n  if (settings.apiKeys[settings.aiProvider]) {\r\n    apiKeyInput.value = settings.apiKeys[settings.aiProvider];\r\n  }\r\n\r\n  // 保存设置\r\n  saveButton.addEventListener('click', async () => {\r\n    const provider = providerSelect.value;\r\n    const model = modelSelect.value;\r\n    const apiKey = apiKeyInput.value;\r\n\r\n    await chrome.storage.sync.set({\r\n      aiProvider: provider,\r\n      aiModel: model,\r\n      apiKeys: {\r\n        ...settings.apiKeys,\r\n        [provider]: apiKey\r\n      }\r\n    });\r\n\r\n    showStatus('Settings saved successfully!');\r\n  });\r\n\r\n  // Debug Storage 按钮功能\r\n  debugButton.addEventListener('click', async () => {\r\n    const result = await chrome.storage.sync.get(null);\r\n    console.log('All stored data:', result);\r\n    showStatus(`Current storage state: ${JSON.stringify(result, null, 2)}`, 'info');\r\n  });\r\n}\r\n\r\n// 显示状态信息的函数\r\nfunction showStatus(message, type = 'success') {\r\n  const statusDiv = document.getElementById('status');\r\n  statusDiv.textContent = message;\r\n  statusDiv.className = `status ${type}`;\r\n  \r\n  // 设置状态样式\r\n  statusDiv.style.marginTop = '10px';\r\n  statusDiv.style.padding = '10px';\r\n  statusDiv.style.borderRadius = '4px';\r\n  \r\n  switch (type) {\r\n    case 'success':\r\n      statusDiv.style.backgroundColor = '#d4edda';\r\n      statusDiv.style.color = '#155724';\r\n      break;\r\n    case 'error':\r\n      statusDiv.style.backgroundColor = '#f8d7da';\r\n      statusDiv.style.color = '#721c24';\r\n      break;\r\n    case 'info':\r\n      statusDiv.style.backgroundColor = '#e2e3e5';\r\n      statusDiv.style.color = '#383d41';\r\n      break;\r\n  }\r\n\r\n  setTimeout(() => {\r\n    statusDiv.style.display = 'none';\r\n  }, 3000);\r\n}\r\n\r\n// 当 DOM 加载完成时初始化\r\ndocument.addEventListener('DOMContentLoaded', initializeOptions);\r\n"],"names":[],"sourceRoot":""}