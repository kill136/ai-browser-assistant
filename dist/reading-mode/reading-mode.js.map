{"version":3,"file":"reading-mode/reading-mode.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,KAAK;AACnD,6CAA6C,KAAK;AAClD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,SAAS;AAC1D;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,kBAAkB,mBAAmB;AACrC,uCAAuC,mBAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,GAAG;AACnD;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,G","sources":["webpack://ai-browser-assistant/./src/reading-mode/reading-mode.js"],"sourcesContent":["class ReadingMode {\r\n  constructor() {\r\n    this.elements = {\r\n      container: document.querySelector('.reading-assistant'),\r\n      minimizeBtn: document.querySelector('.minimize-btn'),\r\n      closeBtn: document.querySelector('.close-btn'),\r\n      progress: document.querySelector('.progress'),\r\n      summary: document.getElementById('summary'),\r\n      keywords: document.getElementById('keywords'),\r\n      resizeHandle: document.querySelector('.resize-handle')\r\n    };\r\n\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n    this.setupEventListeners();\r\n    this.setupDragging();\r\n    this.setupResizing();\r\n  }\r\n\r\n  setupEventListeners() {\r\n    this.elements.minimizeBtn.addEventListener('click', () => {\r\n      this.elements.container.classList.toggle('minimized');\r\n    });\r\n\r\n    this.elements.closeBtn.addEventListener('click', () => {\r\n      console.log('Close button clicked');\r\n      \r\n      window.parent.postMessage({ \r\n        type: 'closeReadingMode',\r\n        feature: 'readingMode',\r\n        enabled: false\r\n      }, '*');\r\n    });\r\n\r\n    // 监听来自父页面的消息\r\n    window.addEventListener('message', (event) => {\r\n      console.log('Reading mode received message:', event.data);\r\n      \r\n      if (event.data.type === 'updateContent') {\r\n        this.updateContent(event.data.content);\r\n      } else if (event.data.type === 'updateProgress') {\r\n        this.updateProgress(event.data.progress);\r\n      }\r\n    });\r\n  }\r\n\r\n  setupDragging() {\r\n    let isDragging = false;\r\n    let startX, startY;\r\n    \r\n    const header = this.elements.container.querySelector('.reading-header');\r\n    \r\n    header.addEventListener('mousedown', (e) => {\r\n      if (e.target === header) {\r\n        isDragging = true;\r\n        const rect = this.elements.container.getBoundingClientRect();\r\n        startX = e.clientX - rect.left;\r\n        startY = e.clientY - rect.top;\r\n        this.elements.container.style.transition = 'none';\r\n      }\r\n    });\r\n\r\n    document.addEventListener('mousemove', (e) => {\r\n      if (!isDragging) return;\r\n      \r\n      const newX = e.clientX - startX;\r\n      const newY = e.clientY - startY;\r\n      \r\n      this.elements.container.style.left = `${newX}px`;\r\n      this.elements.container.style.top = `${newY}px`;\r\n    });\r\n\r\n    document.addEventListener('mouseup', () => {\r\n      if (isDragging) {\r\n        isDragging = false;\r\n        this.elements.container.style.transition = 'all 0.3s ease';\r\n      }\r\n    });\r\n  }\r\n\r\n  setupResizing() {\r\n    let isResizing = false;\r\n    let startWidth, startX;\r\n    \r\n    this.elements.resizeHandle.addEventListener('mousedown', (e) => {\r\n      isResizing = true;\r\n      startWidth = this.elements.container.offsetWidth;\r\n      startX = e.clientX;\r\n      this.elements.container.style.transition = 'none';\r\n    });\r\n\r\n    document.addEventListener('mousemove', (e) => {\r\n      if (!isResizing) return;\r\n      \r\n      const deltaX = startX - e.clientX;\r\n      const newWidth = startWidth + deltaX;\r\n      \r\n      if (newWidth >= 200 && newWidth <= 800) {\r\n        this.elements.container.style.width = `${newWidth}px`;\r\n      }\r\n    });\r\n\r\n    document.addEventListener('mouseup', () => {\r\n      if (isResizing) {\r\n        isResizing = false;\r\n        this.elements.container.style.transition = 'all 0.3s ease';\r\n      }\r\n    });\r\n  }\r\n\r\n  updateContent({ summary, keywords }) {\r\n    console.log('Updating content:', { summary, keywords });\r\n    \r\n    if (this.elements.summary) {\r\n        this.elements.summary.textContent = summary || 'No summary available';\r\n    }\r\n    \r\n    if (this.elements.keywords) {\r\n        this.elements.keywords.innerHTML = (keywords || [])\r\n            .map(kw => `<span class=\"keyword\">${kw}</span>`)\r\n            .join('');\r\n    }\r\n  }\r\n\r\n  updateProgress(progress) {\r\n    this.elements.progress.style.width = `${progress}%`;\r\n  }\r\n}\r\n\r\n// 初始化\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  new ReadingMode();\r\n}); "],"names":[],"sourceRoot":""}